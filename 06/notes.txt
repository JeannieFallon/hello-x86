> six covers basic function calls
  - functions allow for code reuse and bidirectional internaction w/ C and other compiled languages (i.e., write and call functions in C from assembly)
  - call operation: push EIP onto the stack (push location of NEXT instruction onto stack), then jump to location specified (location of function being called); pushes return location onto stack so can be easily returned from
  - ret (return) operation: pop location off of the stack, and then jump there
> code examples:
  - six.asm shows basic function structure using call to jump to the function and pop + jmp to return back to original location of execution
    * pop a location off of the stack and into eax, and then jump there
  - six_ret.asm shows simplified function structure using call to jump to the function and ret to return back
    * pop & jump without using eax


> run commands:
  nasm -f elf32 six.asm -o six.o
  ld -m elf_i386 six.o -o six
  ./six
  echo $?
> expected outputs:
42